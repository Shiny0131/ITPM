<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "mybatis-3-mapper.dtd">
<mapper namespace="member">

	<resultMap type="model.domain.Member" id="memberMap">
		<result property="phoneNumber" column="phone_number"/>
		<result property="name" column="name"/>
		<result property="studentId" column="student_id"/>
		<result property="pw" column="pw"/>
		<result property="mailId" column="mail_id"/>
		<result property="mailDomain" column="mail_domain"/>
		<result property="job" column="job"/>
		<result property="auth" column="auth"/>
		<result property="sGroup" column="s_group"/>
		<result property="jobPosition" column="job_position"/>
		<result property="jobPhone" column="job_phone"/>
		<result property="newPw" column="new_pw"/>
		<result property="photo" column="photo"/>
	</resultMap>
	
	<select id="checkImg" parameterType="String" resultType="String">
		SELECT PHOTO
		  FROM MEMBER
		 WHERE STUDENT_ID = #{studentId}
	</select>
	
	<select id="checkId" parameterType="String" resultType="Integer">
		SELECT COUNT(STUDENT_ID) AS CHK
		  FROM MEMBER
		 WHERE STUDENT_ID = #{studentId}
	</select>
	
	<select id="checkNewPw" parameterType="String" resultMap="memberMap">
		SELECT NEW_PW
		  FROM MEMBER
		 WHERE STUDENT_ID = #{studentId}
	</select>
	
	<select id="getAdminMail" resultMap="memberMap">
		SELECT MAIL_ID, MAIL_DOMAIN FROM MEMBER WHERE STUDENT_ID = 'itpm'
	</select>
	
	<select id="login" resultMap="memberMap" parameterType="member">
		SELECT STUDENT_ID,
			   AUTH,
			   S_GROUP
		  FROM MEMBER
		 WHERE STUDENT_ID = #{studentId}
		   AND PW = SHA(#{pw})
	</select>
	
	<select id="checkPw" resultType="Integer" parameterType="String">
		SELECT LENGTH(PW) AS CHK
		  FROM MEMBER
		 WHERE STUDENT_ID = #{studentId}
	</select>
	
	<!-- 비밀번호 강제설정 -->
	<update id="updatePw" parameterType="String">
		UPDATE MEMBER
		   SET PW = SHA(#{studentId}),
		   	   NEW_PW = 'N'
		 WHERE STUDENT_ID = #{studentId}
	</update>
	
	<!-- 교수 전체조회 -->
	<select id="getProfessorList" resultMap="memberMap">
		SELECT PHONE_NUMBER,
			   NAME,
			   STUDENT_ID,
			   MAIL_ID,
			   MAIL_DOMAIN,
			   JOB,
			   S_GROUP,
			   JOB_POSITION,
			   JOB_PHONE,
			   PHOTO
		  FROM MEMBER
		 WHERE STUDENT_ID != 'itpm'
		   AND S_GROUP = '교수진'
		 ORDER BY STUDENT_ID
	</select>
	
	<!-- 학생 전체조회 -->
	<select id="getStudentList" resultMap="memberMap">
		SELECT PHONE_NUMBER,
			   NAME,
			   STUDENT_ID,
			   MAIL_ID,
			   MAIL_DOMAIN,
			   JOB,
			   S_GROUP,
			   JOB_POSITION,
			   JOB_PHONE,
			   PHOTO
		  FROM MEMBER
		 WHERE STUDENT_ID != 'itpm'
		   AND S_GROUP != '교수진'
		 ORDER BY ABS(S_GROUP), NAME
	
	</select>

	<!-- 기수별 원우 리스트 조회 -->
	<select id="getGroupMemberList" parameterType="String" resultMap="memberMap">
		SELECT PHONE_NUMBER,
			   NAME,
			   STUDENT_ID,
			   MAIL_ID,
			   MAIL_DOMAIN,
			   JOB,
			   S_GROUP,
			   JOB_POSITION,
			   JOB_PHONE,
			   PHOTO
		  FROM MEMBER
		 WHERE S_GROUP = #{sGroup}
		   AND STUDENT_ID != 'itpm'
		 ORDER BY NAME
	</select>
	
	<!-- 기수 리스트 조회 -->
	<select id="getGroupList" parameterType="member" resultMap="memberMap">
		SELECT DISTINCT S_GROUP
		  FROM MEMBER
		 WHERE STUDENT_ID != 'itpm'
		 ORDER BY ABS(S_GROUP)
	</select>
	
	<!-- 내정보 조회 -->
	<select id="getMyInfo" parameterType="String" resultMap="memberMap">
		SELECT PHONE_NUMBER,
			   NAME,
			   STUDENT_ID,
			   MAIL_ID,
			   MAIL_DOMAIN,
			   JOB,
			   S_GROUP,
			   JOB_POSITION,
			   JOB_PHONE,
			   PHOTO
		  FROM MEMBER
		 WHERE STUDENT_ID = #{studentId}
	</select>
	
	<!-- 비밀번호 변경 -->
	<update id="updateNewPw" parameterType="member">
		UPDATE MEMBER
		   SET PW = SHA('${pw}'),
		   	   NEW_PW = 'N'
		 WHERE STUDENT_ID = #{studentId}
	</update>
	
	<!-- 원우 정보 수정 -->
	<update id="updateMyInfo" parameterType="member">
		UPDATE MEMBER
		   SET PHONE_NUMBER = #{phoneNumber},
		   	   MAIL_ID = #{mailId},
		   	   MAIL_DOMAIN = #{mailDomain},
		   	   JOB = #{job},
		   	   JOB_POSITION = #{jobPosition},
		   	   PHOTO = #{photo}
		 WHERE STUDENT_ID = #{studentId}
	</update>
	
	<!-- 신입생 등록 -->
	<insert id="insertMember" parameterType="member">
		INSERT INTO MEMBER(STUDENT_ID,
						   PW,
						   NAME,
						   PHONE_NUMBER,
						   S_GROUP)
					VALUES(#{studentId},
						   #{studentId},
						   #{name},
						   #{phoneNumber},
						   #{sGroup})
	</insert>
	
	<!-- 삭제 -->
	<delete id="deleteMember" parameterType="String">
		DELETE FROM MEMBER
		 WHERE STUDENT_ID = #{studentId}
	</delete>

</mapper>